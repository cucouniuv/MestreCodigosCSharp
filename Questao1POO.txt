== O que é POO? ==
POO significa Programação Orientada a Objetos

== O que é polimorfismo? ==
O conceito principal é que classes derivadas de uma mesma superclasse responde um mesmo método, mas cada um com sua forma/particularidade.
Por exemplo:

Superclasse Animal
Método Mover

Classe Humano: Animal
Método Mover (Implementa o seu jeito de se mover, caminhando)

Classe Peixe: Animal
Método Mover (Implementa o seu jeito de se mover, nadando)

== O que é abstração? ==
Utilizando o mesmo exemplo da questão anterior sobre polimorfismo, podemos declarar a superclasse Animal como abstrata, pois todo animal se move, então, se criarmos uma nova classe Cachorro, por exemplo, o cachorro precisa do método Mover, mas com seu próprio jeito de movimentação.

== O que é encapsulamento? ==
Também utilizando o exemplo da questão sobre polimorfismo e abstração, o encapsulamento seria criar essas classes Humano, Peixe e Cachorro e executar o método Mover.
Conhecemos o método Mover, utilizado para movimentar o animal, mas não precisamos conhecer o que o método Mover faz internamente, pois eles estão encapsulados.

== Quando usar uma classe abstrata e quando devo usar uma interface? ==
Classes abstratas e interfaces podem ser utilizadas em situações que várias classes possuem métodos em comum, mas que também possuem suas particularidades. Então elas poderiam herdar de uma classes abstrata ou de interfaces.
A principal diferença entre classes abstratas e interfaces é que uma classe poderia implementar diversas interfaces, já com a abstração, ela poderia ser implementada somente de uma.

== O que faz as interfaces IDisposable, IComparable, ICloneable e IEnumerable? ==
IDisposable destina-se principalmente a liberar recursos não gerenciados utilizados em nosso código.
https://docs.microsoft.com/pt-br/dotnet/standard/garbage-collection/implementing-dispose

IComparable
https://docs.microsoft.com/pt-br/dotnet/api/system.icomparable?view=netcore-3.1

https://docs.microsoft.com/pt-br/dotnet/api/system.icloneable?view=netcore-3.1

https://docs.microsoft.com/pt-br/dotnet/api/system.collections.generic.ienumerable-1?view=netcore-3.1

Existe herança múltipla (de classes) em C#?
Não, pois poderia ocasionar um problema chamado herança diamante onde uma classe B e C poderiam herdar da classe A que possui o método Correr, mas B e C sobreescrever esse método Correr e executam suas particularidades.
Se implementarmos uma classe D, com herança múltipla de B e C, qual método iria ser executado se chamarmos o método Correr?
Nesse caso, podemos utilizar Interfaces.